//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.3.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class AdminClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "http://localhost:7195";
    }

    addRoom(dto: AddRoomDTO): Observable<AddRoomDTO> {
        let url_ = this.baseUrl + "/api/Admin/AddRoom";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddRoom(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddRoom(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AddRoomDTO>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AddRoomDTO>;
        }));
    }

    protected processAddRoom(response: HttpResponseBase): Observable<AddRoomDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AddRoomDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AddRoomDTO>(null as any);
    }

    editRoom(dto: EditRoomDTO): Observable<EditRoomDTO> {
        let url_ = this.baseUrl + "/api/Admin/EditRoom";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditRoom(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditRoom(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<EditRoomDTO>;
                }
            } else
                return _observableThrow(response_) as any as Observable<EditRoomDTO>;
        }));
    }

    protected processEditRoom(response: HttpResponseBase): Observable<EditRoomDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EditRoomDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<EditRoomDTO>(null as any);
    }

    deleteRoom(token: string | undefined, dto: RoomDTO): Observable<string> {
        let url_ = this.baseUrl + "/api/Admin/DeleteRoom?";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteRoom(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteRoom(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processDeleteRoom(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(null as any);
    }

    listRooms(): Observable<RoomDTO[]> {
        let url_ = this.baseUrl + "/api/Admin/ListRoom";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processListRooms(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processListRooms(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RoomDTO[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RoomDTO[]>;
        }));
    }

    protected processListRooms(response: HttpResponseBase): Observable<RoomDTO[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(RoomDTO.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RoomDTO[]>([null as any]);
    }

    listGuests(token: string | undefined): Observable<GuestDTO[]> {
        let url_ = this.baseUrl + "/api/Admin/ListGuests?";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processListGuests(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processListGuests(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GuestDTO[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GuestDTO[]>;
        }));
    }

    protected processListGuests(response: HttpResponseBase): Observable<GuestDTO[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(GuestDTO.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GuestDTO[]>([null as any]);
    }

    getRoom(id: number | undefined, token: string | undefined): Observable<RoomDTO> {
        let url_ = this.baseUrl + "/api/Admin/GetRoom?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRoom(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRoom(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<RoomDTO>;
                }
            } else
                return _observableThrow(response_) as any as Observable<RoomDTO>;
        }));
    }

    protected processGetRoom(response: HttpResponseBase): Observable<RoomDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoomDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RoomDTO>(null as any);
    }

    payment(token: string | undefined, amount: number | undefined, bookingId: number): Observable<string> {
        let url_ = this.baseUrl + "/api/Admin/Pay?";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        if (amount === null)
            throw new Error("The parameter 'amount' cannot be null.");
        else if (amount !== undefined)
            url_ += "amount=" + encodeURIComponent("" + amount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(bookingId);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPayment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPayment(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processPayment(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(null as any);
    }

    deleteBooking(token: string | undefined, bookingId: number): Observable<string> {
        let url_ = this.baseUrl + "/api/Admin/Delete Booking?";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(bookingId);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteBooking(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteBooking(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processDeleteBooking(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(null as any);
    }

    getBookingList(token: string | undefined): Observable<BookingDTO[]> {
        let url_ = this.baseUrl + "/api/Admin/GetBookingList?";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBookingList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBookingList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BookingDTO[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BookingDTO[]>;
        }));
    }

    protected processGetBookingList(response: HttpResponseBase): Observable<BookingDTO[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BookingDTO.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BookingDTO[]>([null as any]);
    }

    getBooking(bookingId: number | undefined, token: string | undefined): Observable<BookingDTO> {
        let url_ = this.baseUrl + "/api/Admin/GetBooking?";
        if (bookingId === null)
            throw new Error("The parameter 'bookingId' cannot be null.");
        else if (bookingId !== undefined)
            url_ += "bookingId=" + encodeURIComponent("" + bookingId) + "&";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBooking(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBooking(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BookingDTO>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BookingDTO>;
        }));
    }

    protected processGetBooking(response: HttpResponseBase): Observable<BookingDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BookingDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BookingDTO>(null as any);
    }

    getPaymentList(token: string | undefined): Observable<PaymentDTO[]> {
        let url_ = this.baseUrl + "/api/Admin/GetPaymentList?";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPaymentList(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPaymentList(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaymentDTO[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaymentDTO[]>;
        }));
    }

    protected processGetPaymentList(response: HttpResponseBase): Observable<PaymentDTO[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PaymentDTO.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaymentDTO[]>([null as any]);
    }

    getPayment(paymentId: number | undefined, token: string | undefined): Observable<PaymentDTO> {
        let url_ = this.baseUrl + "/api/Admin/GetPayment?";
        if (paymentId === null)
            throw new Error("The parameter 'paymentId' cannot be null.");
        else if (paymentId !== undefined)
            url_ += "paymentId=" + encodeURIComponent("" + paymentId) + "&";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPayment(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPayment(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<PaymentDTO>;
                }
            } else
                return _observableThrow(response_) as any as Observable<PaymentDTO>;
        }));
    }

    protected processGetPayment(response: HttpResponseBase): Observable<PaymentDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PaymentDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PaymentDTO>(null as any);
    }

    bookingRoom(dto: AdminBookingDTO): Observable<BookingDTO> {
        let url_ = this.baseUrl + "/api/Admin/BookingRoom";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(dto);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBookingRoom(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBookingRoom(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<BookingDTO>;
                }
            } else
                return _observableThrow(response_) as any as Observable<BookingDTO>;
        }));
    }

    protected processBookingRoom(response: HttpResponseBase): Observable<BookingDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BookingDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<BookingDTO>(null as any);
    }

    updatePhoto(token: string | undefined, roomId: number | null | undefined, file: FileParameter | null | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/Admin/UpdatePhoto?";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        if (roomId !== undefined && roomId !== null)
            url_ += "roomId=" + encodeURIComponent("" + roomId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file !== null && file !== undefined)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdatePhoto(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdatePhoto(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processUpdatePhoto(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(null as any);
    }
}

@Injectable()
export class AuthorizationClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "http://localhost:7195";
    }

    register(request: RegisterDTO): Observable<User> {
        let url_ = this.baseUrl + "/api/Authorization/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegister(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegister(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<User>;
                }
            } else
                return _observableThrow(response_) as any as Observable<User>;
        }));
    }

    protected processRegister(response: HttpResponseBase): Observable<User> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = User.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<User>(null as any);
    }

    login(request: RegisterDTO): Observable<TokenDTO> {
        let url_ = this.baseUrl + "/api/Authorization/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<TokenDTO>;
                }
            } else
                return _observableThrow(response_) as any as Observable<TokenDTO>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<TokenDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TokenDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TokenDTO>(null as any);
    }

    getMe(token: string): Observable<User> {
        let url_ = this.baseUrl + "/api/Authorization";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(token);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMe(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMe(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<User>;
                }
            } else
                return _observableThrow(response_) as any as Observable<User>;
        }));
    }

    protected processGetMe(response: HttpResponseBase): Observable<User> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = User.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<User>(null as any);
    }
}

@Injectable()
export class UsrClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "http://localhost:7195";
    }

    deleteUser(token: string | undefined): Observable<string> {
        let url_ = this.baseUrl + "/api/Usr/DeleteUser?";
        if (token === null)
            throw new Error("The parameter 'token' cannot be null.");
        else if (token !== undefined)
            url_ += "token=" + encodeURIComponent("" + token) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<string>;
                }
            } else
                return _observableThrow(response_) as any as Observable<string>;
        }));
    }

    protected processDeleteUser(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(null as any);
    }
}

export class AddRoomDTO implements IAddRoomDTO {
    token?: string;
    roomNumber?: number;
    roomPrice?: number;
    roomCapacity?: number;
    roomType?: RoomType;
    roomStatus?: RoomStatus;

    constructor(data?: IAddRoomDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
            this.roomNumber = _data["roomNumber"];
            this.roomPrice = _data["roomPrice"];
            this.roomCapacity = _data["roomCapacity"];
            this.roomType = _data["roomType"];
            this.roomStatus = _data["roomStatus"];
        }
    }

    static fromJS(data: any): AddRoomDTO {
        data = typeof data === 'object' ? data : {};
        let result = new AddRoomDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        data["roomNumber"] = this.roomNumber;
        data["roomPrice"] = this.roomPrice;
        data["roomCapacity"] = this.roomCapacity;
        data["roomType"] = this.roomType;
        data["roomStatus"] = this.roomStatus;
        return data;
    }
}

export interface IAddRoomDTO {
    token?: string;
    roomNumber?: number;
    roomPrice?: number;
    roomCapacity?: number;
    roomType?: RoomType;
    roomStatus?: RoomStatus;
}

export enum RoomType {
    Normal = 0,
    Vip = 1,
}

export enum RoomStatus {
    Free = 0,
    Reserved = 1,
    Occupied = 2,
}

export class EditRoomDTO implements IEditRoomDTO {
    id?: number | undefined;
    token?: string;
    roomNumber?: number;
    roomPrice?: number;
    roomCapacity?: number;
    roomType?: RoomType;
    roomStatus?: RoomStatus;

    constructor(data?: IEditRoomDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.token = _data["token"];
            this.roomNumber = _data["roomNumber"];
            this.roomPrice = _data["roomPrice"];
            this.roomCapacity = _data["roomCapacity"];
            this.roomType = _data["roomType"];
            this.roomStatus = _data["roomStatus"];
        }
    }

    static fromJS(data: any): EditRoomDTO {
        data = typeof data === 'object' ? data : {};
        let result = new EditRoomDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["token"] = this.token;
        data["roomNumber"] = this.roomNumber;
        data["roomPrice"] = this.roomPrice;
        data["roomCapacity"] = this.roomCapacity;
        data["roomType"] = this.roomType;
        data["roomStatus"] = this.roomStatus;
        return data;
    }
}

export interface IEditRoomDTO {
    id?: number | undefined;
    token?: string;
    roomNumber?: number;
    roomPrice?: number;
    roomCapacity?: number;
    roomType?: RoomType;
    roomStatus?: RoomStatus;
}

export class RoomDTO implements IRoomDTO {
    id?: number | undefined;
    roomNumber?: number;
    roomPrice?: number;
    roomCapacity?: number;
    roomPhoto?: string | undefined;
    roomType?: RoomType;
    roomStatus?: RoomStatus;

    constructor(data?: IRoomDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.roomNumber = _data["roomNumber"];
            this.roomPrice = _data["roomPrice"];
            this.roomCapacity = _data["roomCapacity"];
            this.roomPhoto = _data["roomPhoto"];
            this.roomType = _data["roomType"];
            this.roomStatus = _data["roomStatus"];
        }
    }

    static fromJS(data: any): RoomDTO {
        data = typeof data === 'object' ? data : {};
        let result = new RoomDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["roomNumber"] = this.roomNumber;
        data["roomPrice"] = this.roomPrice;
        data["roomCapacity"] = this.roomCapacity;
        data["roomPhoto"] = this.roomPhoto;
        data["roomType"] = this.roomType;
        data["roomStatus"] = this.roomStatus;
        return data;
    }
}

export interface IRoomDTO {
    id?: number | undefined;
    roomNumber?: number;
    roomPrice?: number;
    roomCapacity?: number;
    roomPhoto?: string | undefined;
    roomType?: RoomType;
    roomStatus?: RoomStatus;
}

export class GuestDTO implements IGuestDTO {
    id?: number | undefined;
    name?: string | undefined;
    surname?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: IGuestDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.surname = _data["surname"];
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): GuestDTO {
        data = typeof data === 'object' ? data : {};
        let result = new GuestDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface IGuestDTO {
    id?: number | undefined;
    name?: string | undefined;
    surname?: string | undefined;
    email?: string | undefined;
    password?: string | undefined;
}

export class BookingDTO implements IBookingDTO {
    id?: number | undefined;
    guestId?: number | undefined;
    roomId?: number | undefined;
    roomNr?: number;
    payment?: number;
    bookingFrom?: Date | undefined;
    bookingTo?: Date | undefined;

    constructor(data?: IBookingDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.guestId = _data["guestId"];
            this.roomId = _data["roomId"];
            this.roomNr = _data["roomNr"];
            this.payment = _data["payment"];
            this.bookingFrom = _data["bookingFrom"] ? new Date(_data["bookingFrom"].toString()) : <any>undefined;
            this.bookingTo = _data["bookingTo"] ? new Date(_data["bookingTo"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): BookingDTO {
        data = typeof data === 'object' ? data : {};
        let result = new BookingDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["guestId"] = this.guestId;
        data["roomId"] = this.roomId;
        data["roomNr"] = this.roomNr;
        data["payment"] = this.payment;
        data["bookingFrom"] = this.bookingFrom ? this.bookingFrom.toISOString() : <any>undefined;
        data["bookingTo"] = this.bookingTo ? this.bookingTo.toISOString() : <any>undefined;
        return data;
    }
}

export interface IBookingDTO {
    id?: number | undefined;
    guestId?: number | undefined;
    roomId?: number | undefined;
    roomNr?: number;
    payment?: number;
    bookingFrom?: Date | undefined;
    bookingTo?: Date | undefined;
}

export class PaymentDTO implements IPaymentDTO {
    id?: number;
    bookingId?: number;
    paid?: number;
    paymentType?: PaymentType;

    constructor(data?: IPaymentDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.bookingId = _data["bookingId"];
            this.paid = _data["paid"];
            this.paymentType = _data["paymentType"];
        }
    }

    static fromJS(data: any): PaymentDTO {
        data = typeof data === 'object' ? data : {};
        let result = new PaymentDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["bookingId"] = this.bookingId;
        data["paid"] = this.paid;
        data["paymentType"] = this.paymentType;
        return data;
    }
}

export interface IPaymentDTO {
    id?: number;
    bookingId?: number;
    paid?: number;
    paymentType?: PaymentType;
}

export enum PaymentType {
    None = 0,
    Blick = 1,
    Cash = 2,
    Visa = 3,
}

export class AdminBookingDTO implements IAdminBookingDTO {
    token?: string;
    name?: string | undefined;
    surname?: string | undefined;
    roomId?: number | undefined;
    bookingFrom?: Date | undefined;
    bookingTo?: Date | undefined;

    constructor(data?: IAdminBookingDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
            this.name = _data["name"];
            this.surname = _data["surname"];
            this.roomId = _data["roomId"];
            this.bookingFrom = _data["bookingFrom"] ? new Date(_data["bookingFrom"].toString()) : <any>undefined;
            this.bookingTo = _data["bookingTo"] ? new Date(_data["bookingTo"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AdminBookingDTO {
        data = typeof data === 'object' ? data : {};
        let result = new AdminBookingDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["roomId"] = this.roomId;
        data["bookingFrom"] = this.bookingFrom ? this.bookingFrom.toISOString() : <any>undefined;
        data["bookingTo"] = this.bookingTo ? this.bookingTo.toISOString() : <any>undefined;
        return data;
    }
}

export interface IAdminBookingDTO {
    token?: string;
    name?: string | undefined;
    surname?: string | undefined;
    roomId?: number | undefined;
    bookingFrom?: Date | undefined;
    bookingTo?: Date | undefined;
}

export abstract class Entity implements IEntity {
    id?: number;

    constructor(data?: IEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): Entity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'Entity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IEntity {
    id?: number;
}

export class User extends Entity implements IUser {
    name?: string | undefined;
    surname?: string | undefined;
    email?: string | undefined;
    passwordHash?: string | undefined;
    passwordSalt?: string | undefined;
    refreshToken?: string;
    userRole?: UserRole;
    tokenCreated?: Date;
    tokenExpires?: Date;
    booking?: Booking[] | undefined;

    constructor(data?: IUser) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.surname = _data["surname"];
            this.email = _data["email"];
            this.passwordHash = _data["passwordHash"];
            this.passwordSalt = _data["passwordSalt"];
            this.refreshToken = _data["refreshToken"];
            this.userRole = _data["userRole"];
            this.tokenCreated = _data["tokenCreated"] ? new Date(_data["tokenCreated"].toString()) : <any>undefined;
            this.tokenExpires = _data["tokenExpires"] ? new Date(_data["tokenExpires"].toString()) : <any>undefined;
            if (Array.isArray(_data["booking"])) {
                this.booking = [] as any;
                for (let item of _data["booking"])
                    this.booking!.push(Booking.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["email"] = this.email;
        data["passwordHash"] = this.passwordHash;
        data["passwordSalt"] = this.passwordSalt;
        data["refreshToken"] = this.refreshToken;
        data["userRole"] = this.userRole;
        data["tokenCreated"] = this.tokenCreated ? this.tokenCreated.toISOString() : <any>undefined;
        data["tokenExpires"] = this.tokenExpires ? this.tokenExpires.toISOString() : <any>undefined;
        if (Array.isArray(this.booking)) {
            data["booking"] = [];
            for (let item of this.booking)
                data["booking"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IUser extends IEntity {
    name?: string | undefined;
    surname?: string | undefined;
    email?: string | undefined;
    passwordHash?: string | undefined;
    passwordSalt?: string | undefined;
    refreshToken?: string;
    userRole?: UserRole;
    tokenCreated?: Date;
    tokenExpires?: Date;
    booking?: Booking[] | undefined;
}

export enum UserRole {
    Admin = 0,
    Guest = 1,
}

export class Booking extends Entity implements IBooking {
    bookingFrom?: Date;
    bookingTo?: Date;
    toPay?: number;
    userId?: number;
    user?: User | undefined;
    roomId?: number;
    room?: Room | undefined;
    payments?: Payments[] | undefined;

    constructor(data?: IBooking) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.bookingFrom = _data["bookingFrom"] ? new Date(_data["bookingFrom"].toString()) : <any>undefined;
            this.bookingTo = _data["bookingTo"] ? new Date(_data["bookingTo"].toString()) : <any>undefined;
            this.toPay = _data["toPay"];
            this.userId = _data["userId"];
            this.user = _data["user"] ? User.fromJS(_data["user"]) : <any>undefined;
            this.roomId = _data["roomId"];
            this.room = _data["room"] ? Room.fromJS(_data["room"]) : <any>undefined;
            if (Array.isArray(_data["payments"])) {
                this.payments = [] as any;
                for (let item of _data["payments"])
                    this.payments!.push(Payments.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): Booking {
        data = typeof data === 'object' ? data : {};
        let result = new Booking();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bookingFrom"] = this.bookingFrom ? this.bookingFrom.toISOString() : <any>undefined;
        data["bookingTo"] = this.bookingTo ? this.bookingTo.toISOString() : <any>undefined;
        data["toPay"] = this.toPay;
        data["userId"] = this.userId;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["roomId"] = this.roomId;
        data["room"] = this.room ? this.room.toJSON() : <any>undefined;
        if (Array.isArray(this.payments)) {
            data["payments"] = [];
            for (let item of this.payments)
                data["payments"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IBooking extends IEntity {
    bookingFrom?: Date;
    bookingTo?: Date;
    toPay?: number;
    userId?: number;
    user?: User | undefined;
    roomId?: number;
    room?: Room | undefined;
    payments?: Payments[] | undefined;
}

export class Room extends Entity implements IRoom {
    roomNumber?: number;
    roomPrice?: number;
    roomCapacity?: number;
    roomPhoto?: string | undefined;
    roomStatus?: RoomStatus | undefined;
    roomType?: RoomType | undefined;
    booking?: Booking[] | undefined;

    constructor(data?: IRoom) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.roomNumber = _data["roomNumber"];
            this.roomPrice = _data["roomPrice"];
            this.roomCapacity = _data["roomCapacity"];
            this.roomPhoto = _data["roomPhoto"];
            this.roomStatus = _data["roomStatus"];
            this.roomType = _data["roomType"];
            if (Array.isArray(_data["booking"])) {
                this.booking = [] as any;
                for (let item of _data["booking"])
                    this.booking!.push(Booking.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): Room {
        data = typeof data === 'object' ? data : {};
        let result = new Room();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roomNumber"] = this.roomNumber;
        data["roomPrice"] = this.roomPrice;
        data["roomCapacity"] = this.roomCapacity;
        data["roomPhoto"] = this.roomPhoto;
        data["roomStatus"] = this.roomStatus;
        data["roomType"] = this.roomType;
        if (Array.isArray(this.booking)) {
            data["booking"] = [];
            for (let item of this.booking)
                data["booking"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IRoom extends IEntity {
    roomNumber?: number;
    roomPrice?: number;
    roomCapacity?: number;
    roomPhoto?: string | undefined;
    roomStatus?: RoomStatus | undefined;
    roomType?: RoomType | undefined;
    booking?: Booking[] | undefined;
}

export class Payments extends Entity implements IPayments {
    paid?: number;
    paymentType?: PaymentType;
    bookingId?: number;
    booking?: Booking | undefined;

    constructor(data?: IPayments) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.paid = _data["paid"];
            this.paymentType = _data["paymentType"];
            this.bookingId = _data["bookingId"];
            this.booking = _data["booking"] ? Booking.fromJS(_data["booking"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): Payments {
        data = typeof data === 'object' ? data : {};
        let result = new Payments();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["paid"] = this.paid;
        data["paymentType"] = this.paymentType;
        data["bookingId"] = this.bookingId;
        data["booking"] = this.booking ? this.booking.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IPayments extends IEntity {
    paid?: number;
    paymentType?: PaymentType;
    bookingId?: number;
    booking?: Booking | undefined;
}

export class RegisterDTO implements IRegisterDTO {
    email?: string | undefined;
    password?: string | undefined;

    constructor(data?: IRegisterDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): RegisterDTO {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        return data;
    }
}

export interface IRegisterDTO {
    email?: string | undefined;
    password?: string | undefined;
}

export class TokenDTO implements ITokenDTO {
    token?: string;

    constructor(data?: ITokenDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
        }
    }

    static fromJS(data: any): TokenDTO {
        data = typeof data === 'object' ? data : {};
        let result = new TokenDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        return data;
    }
}

export interface ITokenDTO {
    token?: string;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}